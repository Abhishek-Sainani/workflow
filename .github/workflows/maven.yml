name: Java Maven Build and Test

# Trigger the workflow on push or pull requests to the 'main' branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner provided by GitHub
    
    steps:
    # Step 1: Checkout the repository (fetch the code into the runner)
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Java (JDK 22, you can adjust the version if needed)
    - name: Set up JDK 22
      uses: actions/setup-java@v2
      with:
        java-version: '22'  # Specify your desired JDK version
        distribution: 'adoptopenjdk'  # You can also use 'zulu' or 'temurin' if you prefer

    # Step 3: Cache Maven dependencies (for faster builds)
    - name: Cache Maven dependencies
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository  # Cache Maven repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}  # Use a key based on pom.xml file
        restore-keys: |
          ${{ runner.os }}-maven-

    # Step 4: Run Maven build (compile and package the project)
    - name: Build with Maven
      run: mvn clean install  # Runs the Maven clean install command

    # Step 5: Run tests (optional but recommended)
    - name: Run tests with Maven
      run: mvn test  # Runs Maven test phase to execute unit tests

    # Optional Step: Upload build artifacts (e.g., JAR files)
    # - name: Upload build artifact
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: build-artifacts
    #     path: target/*.jar  # Adjust to the path of your JAR files or other build outputs

